# testing locally with act cli

# ubuntu:
# act -W .github/workflows/release.yml --env ACTIONS_RUNTIME_URL=http://host.docker.internal:8080/ --env ACTIONS_RUNTIME_TOKEN=foo --env ACTIONS_CACHE_URL=http://host.docker.internal:8080/ --artifact-server-path out -j build-ubuntu -P ubuntu-latest=-self-hosted --env-file .env --secret-file .secrets

# for mac target
# act -W .github/workflows/release.yml --env ACTIONS_RUNTIME_URL=http://host.docker.internal:8080/ --env ACTIONS_RUNTIME_TOKEN=foo --env ACTIONS_CACHE_URL=http://host.docker.internal:8080/ --artifact-server-path out -j build-macos -P macos-latest=-self-hosted --env-file .env --secret-file .secrets

# run the whole thing
# act -W .github/workflows/release.yml --env ACTIONS_RUNTIME_URL=http://host.docker.internal:8080/ --env ACTIONS_RUNTIME_TOKEN=foo --env ACTIONS_CACHE_URL=http://host.docker.internal:8080/ --artifact-server-path out -j build-ubuntu -P ubuntu-latest=-self-hosted --env-file .env --secret-file .secrets

name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    outputs:
      asset_path: ${{ steps.upload.outputs.asset_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libavformat-dev libavfilter-dev libavdevice-dev ffmpeg

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build
        run: cargo build --release

      - name: Upload Artifact
        id: upload
        uses: actions/upload-artifact@v2
        with:
          name: screenpipe-ubuntu
          path: target/release/screenpipe

  build-macos:
    runs-on: macos-latest
    outputs:
      asset_path: ${{ steps.upload.outputs.asset_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew install ffmpeg
          brew install create-dmg dav1d svt-av1 libarchive

      - name: Set up environment
        run: |
          echo "LIBRARY_PATH=$LIBRARY_PATH:/opt/homebrew/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/homebrew/lib/pkgconfig:/opt/homebrew/opt/ffmpeg/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build with static FFmpeg
        run: |
          export PKG_CONFIG_PATH="/usr/local/opt/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH"
          cargo build --release --features static-ffmpeg

      - name: Create app bundle
        run: |
          mkdir -p Screenpipe.app/Contents/MacOS
          mkdir -p Screenpipe.app/Contents/Resources
          cp target/release/screenpipe Screenpipe.app/Contents/MacOS/
          cp /usr/local/bin/ffmpeg Screenpipe.app/Contents/Resources/
          cp /usr/local/bin/ffprobe Screenpipe.app/Contents/Resources/
          # Create Info.plist file here if needed

      - name: Sign app bundle
        env:
          MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          codesign --force --options runtime --deep --timestamp --sign "$MACOS_SIGNING_IDENTITY" Screenpipe.app

      - name: Create DMG
        run: create-dmg --volname "Screenpipe" --window-pos 200 120 --window-size 600 300 --icon-size 100 --icon "Screenpipe.app" 175 120 --hide-extension "Screenpipe.app" --app-drop-link 425 120 "Screenpipe.dmg" "Screenpipe.app"

      - name: Notarize DMG
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          xcrun notarytool submit Screenpipe.dmg --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID" --wait
          xcrun stapler staple Screenpipe.dmg

      - name: Upload Artifact
        id: upload
        uses: actions/upload-artifact@v2
        with:
          name: screenpipe-macos
          path: Screenpipe.dmg

  release:
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos] # todo windows
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: screenpipe-ubuntu
          path: ./artifacts/ubuntu

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: screenpipe-macos
          path: ./artifacts/macos

      - name: Set Version
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$(echo ${GITHUB_REF_NAME} | cut -f1 -d-)" >> $GITHUB_ENV

      - name: Create or update Release
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          gh release create ${{ env.RELEASE_VERSION }} --title ${{ env.RELEASE_VERSION }} --generate-notes
          mv ./artifacts/ubuntu/screenpipe ./artifacts/ubuntu/screenpipe-ubuntu
          mv ./artifacts/macos/screenpipe ./artifacts/macos/screenpipe-macos
          gh release upload ${{ env.RELEASE_VERSION }} ./artifacts/ubuntu/* ./artifacts/macos/*
